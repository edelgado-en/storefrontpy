"""
Django settings for storefront project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
# This needs to point to the project directory, like the actual root
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Application definition

INSTALLED_APPS = [
    'django.contrib.sessions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'corsheaders',
    'rest_framework',
    'djoser',
    'playground',
    'store',
    'tags',
    'likes',
    'core'
]

# A middleware is a function that either does something and pass the request to the next middleware or it returns a RESPONSE.
# if it returns a response, the next middleware function is not executed
# These functions are run IN ORDER every we make a request
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # whitenoise is needed to serve static files in production
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # IMPORTANT: The job of the authentication middleware is to inspect the incoming request and if there is information about the user
    # is going to RETRIEVE THAT USER FROM THE DATABASE AND ATTACH IT TO THE REQUEST OBJECT
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# This is needed when using react app in development mode
CORS_ALLOWED_ORIGINS = ['http://localhost:3000', 'http://localhost:8001']

ROOT_URLCONF = 'storefront.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'storefront.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
# YOu can customize the password by adding/removing classes here

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
# With STATIC_ROOT, django will look in the static folder of all apps in the project. Notice how in this project, I only have
# a static folder in the core app, but django is able to find it in the storefront app because of this setting
# IMPORTANT: python3 manage.py collectstatic
# That command will collect all static files in the static folder of all apps in the project and a static folder at the root
# of the project
# Every time you deploy to production, you need to run python3 manage.py collectstatic
# IMPORTANT: add the static folder to the .gitignore file. Because remember we will run this command when deploying to prod
# so it is very similar to the build folder in react
# In order to serve static files in production we need to install a library called whitenose
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# This refers to user uploaded files
MEDIA_URL = '/media/'
# This is to tell djano where these media files are store in the file system. Full path to the media directory
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    # If you want pagination in all your view, you can specify the default pagination here
    # 'PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # It is weird that we specify the page size here. What if we need different page sizes per page, or we want the user to change the page size
    # 'PAGE_SIZE': 10,
    #!!!!!!!!!WITHOUT A COMMA AT THE END, THIS IS NOT A TUPLE
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # the default is to allow any user to access the API. We want to restrict it to only authenticated users
    # You can always override this global permission in specific views
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

AUTH_USER_MODEL = 'core.User'


# You get this information from the djoser documentation
# the keyword current_user is obtained from the djoser documentation. That is the serializer for /users/me
DJOSER = {
    'SERIALIZERS': {
        'user_create': 'core.serializers.UserCreateSerializer',
        'current_user': 'core.serializers.CurrentUserSerializer',
    }
}

# The default value is 5 mins for access token. For refresh token the default value is 1 day
# we are changing it here for convenience
# This specifies the PREFIX(for the token) that should be included in the request header for all API requests
# JWT addYourTokenHere
# /auth/jwt/create
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # with handlers you define where you want the logs to be ouputted
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'verbose',
        }
    },
    'loggers': {
        # an empty string means one loggers for all apps. We don't want to have a specific logger for each app. That's too much
        '': {
            'handlers': ['console', 'file'],
            # DEBUG, INFO, WARNING, ERROR, CRITICAL (I don't think we have CRITICAL in Java)
            # we read the log level from an environment variable. It is not defined, we use the second parameter: INFO
            # Where do we set the environment variables when developing
            'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO'),
        }
    },
    'formatters': {
        'verbose': {
            # You get this names from the django documentaiton for logging formatters
            'format': '{asctime} ({levelname}) - {name} - {message}',
            'style': '{',  # this will translate to str.format()
        }
    }
}
